//
// File generated by rootcint at Wed Feb 14 15:52:59 2018

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "PMAnaSummaryDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void PMAnaSummary_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_PMAnaSummary(void *p = 0);
   static void *newArray_PMAnaSummary(Long_t size, void *p);
   static void delete_PMAnaSummary(void *p);
   static void deleteArray_PMAnaSummary(void *p);
   static void destruct_PMAnaSummary(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PMAnaSummary*)
   {
      ::PMAnaSummary *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PMAnaSummary >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PMAnaSummary", ::PMAnaSummary::Class_Version(), "PMAnaSummary.h", 20,
                  typeid(::PMAnaSummary), DefineBehavior(ptr, ptr),
                  &::PMAnaSummary::Dictionary, isa_proxy, 0,
                  sizeof(::PMAnaSummary) );
      instance.SetNew(&new_PMAnaSummary);
      instance.SetNewArray(&newArray_PMAnaSummary);
      instance.SetDelete(&delete_PMAnaSummary);
      instance.SetDeleteArray(&deleteArray_PMAnaSummary);
      instance.SetDestructor(&destruct_PMAnaSummary);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PMAnaSummary*)
   {
      return GenerateInitInstanceLocal((::PMAnaSummary*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PMAnaSummary*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *PMAnaSummary::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PMAnaSummary::Class_Name()
{
   return "PMAnaSummary";
}

//______________________________________________________________________________
const char *PMAnaSummary::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PMAnaSummary*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PMAnaSummary::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PMAnaSummary*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PMAnaSummary::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PMAnaSummary*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PMAnaSummary::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PMAnaSummary*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void PMAnaSummary::Streamer(TBuffer &R__b)
{
   // Stream an object of class PMAnaSummary.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> Ntrack;
      R__b >> Ningtrack;
      R__b >> clstime;
      R__b >> clstimecorr;
      R__b >> exptime;
      R__b >> hitcyc;
      R__b >> ontime;
      R__b >> vetowtracking;
      R__b >> edgewtracking;
      R__b >> openangle;
      R__b >> crossangle;
      {
         vector<Float_t> &R__stl =  x;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  y;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  z;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  zx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  zy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  startxpln;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  startypln;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  startxch;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  startych;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  endxpln;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  endypln;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  endxch;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  endych;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  thetax;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  thetay;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  angle;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  v_startmod;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  h_startmod;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ing_startmod;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ing_endmod;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ing_startpln;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ing_endpln;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ing_trk2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  pm_stop2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  ing_stop2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  sci_range;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  iron_range;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  iron_pene;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  veto2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  edge2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  pdg;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  mucl;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  trkpe;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  intcptx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  intcpty;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  slopex;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  slopey;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  truemomentum;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  trueangle;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  trackid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  time1;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  time2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  timen1;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  timen2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  timene1;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Float_t> &R__stl =  timene2;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> nhits;
      int R__i;
      for (R__i = 0; R__i < 1000; R__i++)
         fIngridHit[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 10; R__i++)
         fTrack[R__i].Streamer(R__b);
      R__b >> ntracks;
      R__b.CheckByteCount(R__s, R__c, PMAnaSummary::IsA());
   } else {
      R__c = R__b.WriteVersion(PMAnaSummary::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << Ntrack;
      R__b << Ningtrack;
      R__b << clstime;
      R__b << clstimecorr;
      R__b << exptime;
      R__b << hitcyc;
      R__b << ontime;
      R__b << vetowtracking;
      R__b << edgewtracking;
      R__b << openangle;
      R__b << crossangle;
      {
         vector<Float_t> &R__stl =  x;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  y;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  z;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  zx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  zy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  startxpln;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  startypln;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  startxch;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  startych;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  endxpln;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  endypln;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  endxch;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  endych;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  thetax;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  thetay;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  angle;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  v_startmod;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  h_startmod;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ing_startmod;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ing_endmod;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ing_startpln;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ing_endpln;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ing_trk2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  pm_stop2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  ing_stop2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  sci_range;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  iron_range;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  iron_pene;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  veto2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  edge2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  pdg;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  mucl;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  trkpe;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  intcptx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  intcpty;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  slopex;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  slopey;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  truemomentum;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  trueangle;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  trackid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  time1;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  time2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  timen1;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  timen2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  timene1;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Float_t> &R__stl =  timene2;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Float_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << nhits;
      int R__i;
      for (R__i = 0; R__i < 1000; R__i++)
         fIngridHit[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 10; R__i++)
         fTrack[R__i].Streamer(R__b);
      R__b << ntracks;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void PMAnaSummary::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class PMAnaSummary.
      TClass *R__cl = ::PMAnaSummary::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "Ntrack", &Ntrack);
      R__insp.Inspect(R__cl, R__parent, "Ningtrack", &Ningtrack);
      R__insp.Inspect(R__cl, R__parent, "clstime", &clstime);
      R__insp.Inspect(R__cl, R__parent, "clstimecorr", &clstimecorr);
      R__insp.Inspect(R__cl, R__parent, "exptime", &exptime);
      R__insp.Inspect(R__cl, R__parent, "hitcyc", &hitcyc);
      R__insp.Inspect(R__cl, R__parent, "ontime", &ontime);
      R__insp.Inspect(R__cl, R__parent, "vetowtracking", &vetowtracking);
      R__insp.Inspect(R__cl, R__parent, "edgewtracking", &edgewtracking);
      R__insp.Inspect(R__cl, R__parent, "openangle", &openangle);
      R__insp.Inspect(R__cl, R__parent, "crossangle", &crossangle);
      R__insp.Inspect(R__cl, R__parent, "x", (void*)&x);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&x, R__insp, strcat(R__parent,"x."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "y", (void*)&y);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&y, R__insp, strcat(R__parent,"y."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "z", (void*)&z);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&z, R__insp, strcat(R__parent,"z."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "zx", (void*)&zx);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&zx, R__insp, strcat(R__parent,"zx."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "zy", (void*)&zy);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&zy, R__insp, strcat(R__parent,"zy."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "startxpln", (void*)&startxpln);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&startxpln, R__insp, strcat(R__parent,"startxpln."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "startypln", (void*)&startypln);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&startypln, R__insp, strcat(R__parent,"startypln."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "startxch", (void*)&startxch);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&startxch, R__insp, strcat(R__parent,"startxch."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "startych", (void*)&startych);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&startych, R__insp, strcat(R__parent,"startych."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "endxpln", (void*)&endxpln);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&endxpln, R__insp, strcat(R__parent,"endxpln."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "endypln", (void*)&endypln);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&endypln, R__insp, strcat(R__parent,"endypln."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "endxch", (void*)&endxch);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&endxch, R__insp, strcat(R__parent,"endxch."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "endych", (void*)&endych);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&endych, R__insp, strcat(R__parent,"endych."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "thetax", (void*)&thetax);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&thetax, R__insp, strcat(R__parent,"thetax."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "thetay", (void*)&thetay);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&thetay, R__insp, strcat(R__parent,"thetay."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "angle", (void*)&angle);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&angle, R__insp, strcat(R__parent,"angle."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "v_startmod", (void*)&v_startmod);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&v_startmod, R__insp, strcat(R__parent,"v_startmod."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "h_startmod", (void*)&h_startmod);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&h_startmod, R__insp, strcat(R__parent,"h_startmod."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "ing_startmod", (void*)&ing_startmod);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&ing_startmod, R__insp, strcat(R__parent,"ing_startmod."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "ing_endmod", (void*)&ing_endmod);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&ing_endmod, R__insp, strcat(R__parent,"ing_endmod."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "ing_startpln", (void*)&ing_startpln);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&ing_startpln, R__insp, strcat(R__parent,"ing_startpln."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "ing_endpln", (void*)&ing_endpln);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&ing_endpln, R__insp, strcat(R__parent,"ing_endpln."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "ing_trk2", (void*)&ing_trk2);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&ing_trk2, R__insp, strcat(R__parent,"ing_trk2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "pm_stop2", (void*)&pm_stop2);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&pm_stop2, R__insp, strcat(R__parent,"pm_stop2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "ing_stop2", (void*)&ing_stop2);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&ing_stop2, R__insp, strcat(R__parent,"ing_stop2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "sci_range", (void*)&sci_range);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&sci_range, R__insp, strcat(R__parent,"sci_range."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "iron_range", (void*)&iron_range);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&iron_range, R__insp, strcat(R__parent,"iron_range."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "iron_pene", (void*)&iron_pene);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&iron_pene, R__insp, strcat(R__parent,"iron_pene."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "veto2", (void*)&veto2);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&veto2, R__insp, strcat(R__parent,"veto2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "edge2", (void*)&edge2);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&edge2, R__insp, strcat(R__parent,"edge2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "pdg", (void*)&pdg);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&pdg, R__insp, strcat(R__parent,"pdg."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "mucl", (void*)&mucl);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&mucl, R__insp, strcat(R__parent,"mucl."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "trkpe", (void*)&trkpe);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&trkpe, R__insp, strcat(R__parent,"trkpe."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "intcptx", (void*)&intcptx);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&intcptx, R__insp, strcat(R__parent,"intcptx."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "intcpty", (void*)&intcpty);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&intcpty, R__insp, strcat(R__parent,"intcpty."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "slopex", (void*)&slopex);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&slopex, R__insp, strcat(R__parent,"slopex."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "slopey", (void*)&slopey);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&slopey, R__insp, strcat(R__parent,"slopey."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "truemomentum", (void*)&truemomentum);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&truemomentum, R__insp, strcat(R__parent,"truemomentum."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "trueangle", (void*)&trueangle);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&trueangle, R__insp, strcat(R__parent,"trueangle."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "trackid", (void*)&trackid);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&trackid, R__insp, strcat(R__parent,"trackid."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "time1", (void*)&time1);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&time1, R__insp, strcat(R__parent,"time1."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "time2", (void*)&time2);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&time2, R__insp, strcat(R__parent,"time2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "timen1", (void*)&timen1);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&timen1, R__insp, strcat(R__parent,"timen1."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "timen2", (void*)&timen2);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&timen2, R__insp, strcat(R__parent,"timen2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "timene1", (void*)&timene1);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&timene1, R__insp, strcat(R__parent,"timene1."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "timene2", (void*)&timene2);
      ::ROOT::GenericShowMembers("vector<Float_t>", (void*)&timene2, R__insp, strcat(R__parent,"timene2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "nhits", &nhits);
      R__insp.Inspect(R__cl, R__parent, "fIngridHit[1000]", fIngridHit);
      R__insp.Inspect(R__cl, R__parent, "fTrack[10]", fTrack);
      R__insp.Inspect(R__cl, R__parent, "ntracks", &ntracks);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PMAnaSummary(void *p) {
      return  p ? new(p) ::PMAnaSummary : new ::PMAnaSummary;
   }
   static void *newArray_PMAnaSummary(Long_t nElements, void *p) {
      return p ? new(p) ::PMAnaSummary[nElements] : new ::PMAnaSummary[nElements];
   }
   // Wrapper around operator delete
   static void delete_PMAnaSummary(void *p) {
      delete ((::PMAnaSummary*)p);
   }
   static void deleteArray_PMAnaSummary(void *p) {
      delete [] ((::PMAnaSummary*)p);
   }
   static void destruct_PMAnaSummary(void *p) {
      typedef ::PMAnaSummary current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PMAnaSummary

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* PMAnaSummaryDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablePMAnaSummaryDict();

extern "C" void G__set_cpp_environmentPMAnaSummaryDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("PMAnaSummary.h");
  G__cpp_reset_tagtablePMAnaSummaryDict();
}
#include <new>
extern "C" int G__cpp_dllrevPMAnaSummaryDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* PMAnaSummary */
static int G__PMAnaSummaryDict_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PMAnaSummary* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PMAnaSummary[n];
     } else {
       p = new((void*) gvp) PMAnaSummary[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PMAnaSummary;
     } else {
       p = new((void*) gvp) PMAnaSummary;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PMAnaSummary* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new PMAnaSummary(*(PMAnaSummary*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) PMAnaSummary(*(PMAnaSummary*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMAnaSummary*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMAnaSummary*) G__getstructoffset())->AddIngridHit((IngridHitSummary*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const PMAnaSummary*) G__getstructoffset())->GetIngridHit((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMAnaSummary*) G__getstructoffset())->AddTrack((IngridTrackSummary*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const PMAnaSummary*) G__getstructoffset())->GetTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((PMAnaSummary*) G__getstructoffset())->Nhits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((PMAnaSummary*) G__getstructoffset())->Ntracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PMAnaSummary::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PMAnaSummary::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PMAnaSummary::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PMAnaSummary::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PMAnaSummary*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PMAnaSummary::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PMAnaSummary::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PMAnaSummary::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PMAnaSummaryDict_173_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PMAnaSummary::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PMAnaSummary G__TPMAnaSummary;
static int G__PMAnaSummaryDict_173_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PMAnaSummary*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PMAnaSummary*) (soff+(sizeof(PMAnaSummary)*i)))->~G__TPMAnaSummary();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PMAnaSummary*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PMAnaSummary*) (soff))->~G__TPMAnaSummary();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PMAnaSummaryDict_173_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PMAnaSummary* dest = (PMAnaSummary*) G__getstructoffset();
   *dest = *(PMAnaSummary*) libp->para[0].ref;
   const PMAnaSummary& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* PMAnaSummary */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncPMAnaSummaryDict {
 public:
  G__Sizep2memfuncPMAnaSummaryDict(): p(&G__Sizep2memfuncPMAnaSummaryDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncPMAnaSummaryDict::*p)();
};

size_t G__get_sizep2memfuncPMAnaSummaryDict()
{
  G__Sizep2memfuncPMAnaSummaryDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancePMAnaSummaryDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary))) {
     PMAnaSummary *G__Lderived;
     G__Lderived=(PMAnaSummary*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary),G__get_linked_tagnum(&G__PMAnaSummaryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablePMAnaSummaryDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* PMAnaSummary */
static void G__setup_memvarPMAnaSummary(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary));
   { PMAnaSummary *p; p=(PMAnaSummary*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Ntrack)-(long)(p)),105,0,0,-1,-1,-1,1,"Ntrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ningtrack)-(long)(p)),105,0,0,-1,-1,-1,1,"Ningtrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->clstime)-(long)(p)),102,0,0,-1,-1,-1,1,"clstime=",0,"time of cluster defined by most high p.e.");
   G__memvar_setup((void*)((long)(&p->clstimecorr)-(long)(p)),102,0,0,-1,-1,-1,1,"clstimecorr=",0,"time after correction by measurement time of CT");
   G__memvar_setup((void*)((long)(&p->exptime)-(long)(p)),102,0,0,-1,-1,-1,1,"exptime=",0,"diff. from expected time");
   G__memvar_setup((void*)((long)(&p->hitcyc)-(long)(p)),105,0,0,-1,-1,-1,1,"hitcyc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ontime)-(long)(p)),103,0,0,-1,-1,-1,1,"ontime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vetowtracking)-(long)(p)),103,0,0,-1,-1,-1,1,"vetowtracking=",0,"Upstream VETO");
   G__memvar_setup((void*)((long)(&p->edgewtracking)-(long)(p)),103,0,0,-1,-1,-1,1,"edgewtracking=",0,"Fiducial CUT");
   G__memvar_setup((void*)((long)(&p->openangle)-(long)(p)),102,0,0,-1,-1,-1,1,"openangle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->crossangle)-(long)(p)),102,0,0,-1,-1,-1,1,"crossangle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"zx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"zy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startxpln)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"startxpln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startypln)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"startypln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startxch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"startxch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startych)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"startych=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->endxpln)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"endxpln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->endypln)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"endypln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->endxch)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"endxch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->endych)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"endych=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thetax)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"thetax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thetay)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"thetay=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->angle)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"angle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->v_startmod)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"v_startmod=",0,"added by koga 2014/4/4");
   G__memvar_setup((void*)((long)(&p->h_startmod)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"h_startmod=",0,"added by koga 2014/4/4");
   G__memvar_setup((void*)((long)(&p->ing_startmod)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ing_startmod=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ing_endmod)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ing_endmod=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ing_startpln)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ing_startpln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ing_endpln)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ing_endpln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ing_trk2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ing_trk2=",0,"added by koga 2014/2/8");
   G__memvar_setup((void*)((long)(&p->pm_stop2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pm_stop2=",0,"added by koga 2014/2/8");
   G__memvar_setup((void*)((long)(&p->ing_stop2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"ing_stop2=",0,"added by koga 2014/2/8");
   G__memvar_setup((void*)((long)(&p->sci_range)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"sci_range=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iron_range)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"iron_range=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iron_pene)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"iron_pene=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->veto2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"veto2=",0,"Upstream VETO //added by koga 2014/2/8");
   G__memvar_setup((void*)((long)(&p->edge2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"edge2=",0,"Fiducial CUT  //added by koga 2014/2/8");
   G__memvar_setup((void*)((long)(&p->pdg)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pdg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mucl)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"mucl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trkpe)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"trkpe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->intcptx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"intcptx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->intcpty)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"intcpty=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slopex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"slopex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->slopey)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"slopey=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->truemomentum)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"truemomentum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trueangle)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"trueangle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"trackid=",0,"2014/2/2");
   G__memvar_setup((void*)((long)(&p->time1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"time1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"time2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timen1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"timen1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timen2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"timen2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timene1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"timene1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timene2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,1,"timene2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nhits)-(long)(p)),105,0,0,-1,-1,-1,1,"nhits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_TRef),-1,-1,4,"fIngridHit[1000]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_TRef),-1,-1,4,"fTrack[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntracks)-(long)(p)),105,0,0,-1,-1,-1,1,"ntracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PMAnaSummaryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarPMAnaSummaryDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncPMAnaSummary(void) {
   /* PMAnaSummary */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary));
   G__memfunc_setup("PMAnaSummary",1179,G__PMAnaSummaryDict_173_0_1, 105, G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMAnaSummary",1179,G__PMAnaSummaryDict_173_0_2, 105, G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary), -1, 0, 1, 1, 1, 0, "u 'PMAnaSummary' - 11 - basicsum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__PMAnaSummaryDict_173_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIngridHit",1163,G__PMAnaSummaryDict_173_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'IngridHitSummary' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIngridHit",1186,G__PMAnaSummaryDict_173_0_6, 85, G__get_linked_tagnum(&G__PMAnaSummaryDictLN_IngridHitSummary), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__PMAnaSummaryDict_173_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'IngridTrackSummary' - 0 - trk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__PMAnaSummaryDict_173_0_8, 85, G__get_linked_tagnum(&G__PMAnaSummaryDictLN_IngridTrackSummary), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nhits",518,G__PMAnaSummaryDict_173_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ntracks",726,G__PMAnaSummaryDict_173_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PMAnaSummaryDict_173_0_11, 85, G__get_linked_tagnum(&G__PMAnaSummaryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&PMAnaSummary::Class), 0);
   G__memfunc_setup("Class_Name",982,G__PMAnaSummaryDict_173_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&PMAnaSummary::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__PMAnaSummaryDict_173_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&PMAnaSummary::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__PMAnaSummaryDict_173_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&PMAnaSummary::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PMAnaSummaryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PMAnaSummaryDict_173_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PMAnaSummaryDict_173_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&PMAnaSummary::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PMAnaSummaryDict_173_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&PMAnaSummary::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__PMAnaSummaryDict_173_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&PMAnaSummary::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PMAnaSummaryDict_173_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&PMAnaSummary::DeclFileLine), 0);
   // automatic destructor
   G__memfunc_setup("~PMAnaSummary", 1305, G__PMAnaSummaryDict_173_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PMAnaSummaryDict_173_0_24, (int) ('u'), G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary), -1, 1, 1, 1, 1, 0, "u 'PMAnaSummary' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncPMAnaSummaryDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalPMAnaSummaryDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcPMAnaSummaryDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__PMAnaSummaryDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_IngridHitSummary = { "IngridHitSummary" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_IngridTrackSummary = { "IngridTrackSummary" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_PMAnaSummary = { "PMAnaSummary" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__PMAnaSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablePMAnaSummaryDict() {
  G__PMAnaSummaryDictLN_TClass.tagnum = -1 ;
  G__PMAnaSummaryDictLN_TBuffer.tagnum = -1 ;
  G__PMAnaSummaryDictLN_TMemberInspector.tagnum = -1 ;
  G__PMAnaSummaryDictLN_TObject.tagnum = -1 ;
  G__PMAnaSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__PMAnaSummaryDictLN_TRef.tagnum = -1 ;
  G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__PMAnaSummaryDictLN_IngridHitSummary.tagnum = -1 ;
  G__PMAnaSummaryDictLN_IngridTrackSummary.tagnum = -1 ;
  G__PMAnaSummaryDictLN_PMAnaSummary.tagnum = -1 ;
  G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__PMAnaSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablePMAnaSummaryDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_TRef);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_IngridHitSummary);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_IngridTrackSummary);
   G__tagtable_setup(G__get_linked_tagnum(&G__PMAnaSummaryDictLN_PMAnaSummary),sizeof(PMAnaSummary),-1,30464,"Ingrid Hit Summary //change1to2to3 forB2 //change 3 to 4 for B2 2014/2/2 //change 4 to 5 for B2 2014/2/8 //change 6 to 7 for B2 2014/4/4//change 7 to 9 2014/7/26 change 9 to 10 2014/8/17",G__setup_memvarPMAnaSummary,G__setup_memfuncPMAnaSummary);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__PMAnaSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupPMAnaSummaryDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupPMAnaSummaryDict()");
  G__set_cpp_environmentPMAnaSummaryDict();
  G__cpp_setup_tagtablePMAnaSummaryDict();

  G__cpp_setup_inheritancePMAnaSummaryDict();

  G__cpp_setup_typetablePMAnaSummaryDict();

  G__cpp_setup_memvarPMAnaSummaryDict();

  G__cpp_setup_memfuncPMAnaSummaryDict();
  G__cpp_setup_globalPMAnaSummaryDict();
  G__cpp_setup_funcPMAnaSummaryDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncPMAnaSummaryDict();
  return;
}
class G__cpp_setup_initPMAnaSummaryDict {
  public:
    G__cpp_setup_initPMAnaSummaryDict() { G__add_setup_func("PMAnaSummaryDict",(G__incsetup)(&G__cpp_setupPMAnaSummaryDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initPMAnaSummaryDict() { G__remove_setup_func("PMAnaSummaryDict"); }
};
G__cpp_setup_initPMAnaSummaryDict G__cpp_setup_initializerPMAnaSummaryDict;

