//
// File generated by rootcint at Sat Nov  3 05:57:48 2012

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "IngridBasicReconSummaryDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void IngridBasicReconSummary_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_IngridBasicReconSummary(void *p = 0);
   static void *newArray_IngridBasicReconSummary(Long_t size, void *p);
   static void delete_IngridBasicReconSummary(void *p);
   static void deleteArray_IngridBasicReconSummary(void *p);
   static void destruct_IngridBasicReconSummary(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::IngridBasicReconSummary*)
   {
      ::IngridBasicReconSummary *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::IngridBasicReconSummary >(0);
      static ::ROOT::TGenericClassInfo 
         instance("IngridBasicReconSummary", ::IngridBasicReconSummary::Class_Version(), "IngridBasicReconSummary.h", 18,
                  typeid(::IngridBasicReconSummary), DefineBehavior(ptr, ptr),
                  &::IngridBasicReconSummary::Dictionary, isa_proxy, 0,
                  sizeof(::IngridBasicReconSummary) );
      instance.SetNew(&new_IngridBasicReconSummary);
      instance.SetNewArray(&newArray_IngridBasicReconSummary);
      instance.SetDelete(&delete_IngridBasicReconSummary);
      instance.SetDeleteArray(&deleteArray_IngridBasicReconSummary);
      instance.SetDestructor(&destruct_IngridBasicReconSummary);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::IngridBasicReconSummary*)
   {
      return GenerateInitInstanceLocal((::IngridBasicReconSummary*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::IngridBasicReconSummary*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *IngridBasicReconSummary::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *IngridBasicReconSummary::Class_Name()
{
   return "IngridBasicReconSummary";
}

//______________________________________________________________________________
const char *IngridBasicReconSummary::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::IngridBasicReconSummary*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int IngridBasicReconSummary::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::IngridBasicReconSummary*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void IngridBasicReconSummary::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::IngridBasicReconSummary*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *IngridBasicReconSummary::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::IngridBasicReconSummary*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void IngridBasicReconSummary::Streamer(TBuffer &R__b)
{
   // Stream an object of class IngridBasicReconSummary.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> Ntrack;
      R__b >> clstime;
      R__b >> CTtimecorr;
      R__b >> clstimecorr;
      R__b >> exptime;
      R__b >> nhitclster;
      R__b >> nactpln;
      R__b >> actinarow;
      R__b >> layerpe;
      R__b >> upstreamVETO;
      R__b >> upstreamedge;
      R__b >> newfid;
      R__b >> newfidcosmic;
      R__b >> vinternal;
      R__b >> hitmod;
      R__b >> hitcyc;
      R__b >> spill_flag;
      R__b >> bunch_flag;
      R__b >> ontime;
      R__b >> trgbit;
      R__b >> inarowbit;
      R__b >> vetodist;
      R__b >> vetowtracking;
      R__b >> edgewtracking;
      R__b >> hastrk;
      R__b >> matchtrk;
      R__b >> modfc;
      R__b >> penIron;
      R__b >> muE;
      R__b >> nuErec;
      R__b >> nhitx;
      R__b >> nhity;
      R__b >> ntrackhitx;
      R__b >> ntrackhity;
      R__b >> retracktest;
      R__b >> trg_sec;
      R__b >> upstreamtpl;
      R__b >> vertexz;
      R__b >> vertexxz;
      R__b >> vertexyz;
      R__b >> angle;
      R__b >> thetax;
      R__b >> thetay;
      {
         vector<int> &R__stl =  vertexx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  vertexy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> horn250;
      R__b >> vpe;
      R__b >> startxpln;
      R__b >> startypln;
      R__b >> startxch;
      R__b >> startych;
      R__b >> endxpln;
      R__b >> endypln;
      R__b >> endxch;
      R__b >> endych;
      R__b >> vertexx_true;
      R__b >> vertexy_true;
      R__b >> vertexz_true;
      R__b >> x;
      R__b >> y;
      R__b >> z;
      R__b >> zx;
      R__b >> zy;
      R__b >> nhits;
      int R__i;
      for (R__i = 0; R__i < 1000; R__i++)
         fIngridHit[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 10; R__i++)
         fTrack[R__i].Streamer(R__b);
      R__b >> ntracks;
      R__b.CheckByteCount(R__s, R__c, IngridBasicReconSummary::IsA());
   } else {
      R__c = R__b.WriteVersion(IngridBasicReconSummary::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << Ntrack;
      R__b << clstime;
      R__b << CTtimecorr;
      R__b << clstimecorr;
      R__b << exptime;
      R__b << nhitclster;
      R__b << nactpln;
      R__b << actinarow;
      R__b << layerpe;
      R__b << upstreamVETO;
      R__b << upstreamedge;
      R__b << newfid;
      R__b << newfidcosmic;
      R__b << vinternal;
      R__b << hitmod;
      R__b << hitcyc;
      R__b << spill_flag;
      R__b << bunch_flag;
      R__b << ontime;
      R__b << trgbit;
      R__b << inarowbit;
      R__b << vetodist;
      R__b << vetowtracking;
      R__b << edgewtracking;
      R__b << hastrk;
      R__b << matchtrk;
      R__b << modfc;
      R__b << penIron;
      R__b << muE;
      R__b << nuErec;
      R__b << nhitx;
      R__b << nhity;
      R__b << ntrackhitx;
      R__b << ntrackhity;
      R__b << retracktest;
      R__b << trg_sec;
      R__b << upstreamtpl;
      R__b << vertexz;
      R__b << vertexxz;
      R__b << vertexyz;
      R__b << angle;
      R__b << thetax;
      R__b << thetay;
      {
         vector<int> &R__stl =  vertexx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  vertexy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << horn250;
      R__b << vpe;
      R__b << startxpln;
      R__b << startypln;
      R__b << startxch;
      R__b << startych;
      R__b << endxpln;
      R__b << endypln;
      R__b << endxch;
      R__b << endych;
      R__b << vertexx_true;
      R__b << vertexy_true;
      R__b << vertexz_true;
      R__b << x;
      R__b << y;
      R__b << z;
      R__b << zx;
      R__b << zy;
      R__b << nhits;
      int R__i;
      for (R__i = 0; R__i < 1000; R__i++)
         fIngridHit[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 10; R__i++)
         fTrack[R__i].Streamer(R__b);
      R__b << ntracks;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void IngridBasicReconSummary::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class IngridBasicReconSummary.
      TClass *R__cl = ::IngridBasicReconSummary::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "Ntrack", &Ntrack);
      R__insp.Inspect(R__cl, R__parent, "clstime", &clstime);
      R__insp.Inspect(R__cl, R__parent, "CTtimecorr", &CTtimecorr);
      R__insp.Inspect(R__cl, R__parent, "clstimecorr", &clstimecorr);
      R__insp.Inspect(R__cl, R__parent, "exptime", &exptime);
      R__insp.Inspect(R__cl, R__parent, "nhitclster", &nhitclster);
      R__insp.Inspect(R__cl, R__parent, "nactpln", &nactpln);
      R__insp.Inspect(R__cl, R__parent, "actinarow", &actinarow);
      R__insp.Inspect(R__cl, R__parent, "layerpe", &layerpe);
      R__insp.Inspect(R__cl, R__parent, "upstreamVETO", &upstreamVETO);
      R__insp.Inspect(R__cl, R__parent, "upstreamedge", &upstreamedge);
      R__insp.Inspect(R__cl, R__parent, "newfid", &newfid);
      R__insp.Inspect(R__cl, R__parent, "newfidcosmic", &newfidcosmic);
      R__insp.Inspect(R__cl, R__parent, "vinternal", &vinternal);
      R__insp.Inspect(R__cl, R__parent, "hitmod", &hitmod);
      R__insp.Inspect(R__cl, R__parent, "hitcyc", &hitcyc);
      R__insp.Inspect(R__cl, R__parent, "spill_flag", &spill_flag);
      R__insp.Inspect(R__cl, R__parent, "bunch_flag", &bunch_flag);
      R__insp.Inspect(R__cl, R__parent, "ontime", &ontime);
      R__insp.Inspect(R__cl, R__parent, "trgbit", &trgbit);
      R__insp.Inspect(R__cl, R__parent, "inarowbit", &inarowbit);
      R__insp.Inspect(R__cl, R__parent, "vetodist", &vetodist);
      R__insp.Inspect(R__cl, R__parent, "vetowtracking", &vetowtracking);
      R__insp.Inspect(R__cl, R__parent, "edgewtracking", &edgewtracking);
      R__insp.Inspect(R__cl, R__parent, "hastrk", &hastrk);
      R__insp.Inspect(R__cl, R__parent, "matchtrk", &matchtrk);
      R__insp.Inspect(R__cl, R__parent, "modfc", &modfc);
      R__insp.Inspect(R__cl, R__parent, "penIron", &penIron);
      R__insp.Inspect(R__cl, R__parent, "muE", &muE);
      R__insp.Inspect(R__cl, R__parent, "nuErec", &nuErec);
      R__insp.Inspect(R__cl, R__parent, "nhitx", &nhitx);
      R__insp.Inspect(R__cl, R__parent, "nhity", &nhity);
      R__insp.Inspect(R__cl, R__parent, "ntrackhitx", &ntrackhitx);
      R__insp.Inspect(R__cl, R__parent, "ntrackhity", &ntrackhity);
      R__insp.Inspect(R__cl, R__parent, "retracktest", &retracktest);
      R__insp.Inspect(R__cl, R__parent, "trg_sec", &trg_sec);
      R__insp.Inspect(R__cl, R__parent, "upstreamtpl", &upstreamtpl);
      R__insp.Inspect(R__cl, R__parent, "vertexz", &vertexz);
      R__insp.Inspect(R__cl, R__parent, "vertexxz", &vertexxz);
      R__insp.Inspect(R__cl, R__parent, "vertexyz", &vertexyz);
      R__insp.Inspect(R__cl, R__parent, "angle", &angle);
      R__insp.Inspect(R__cl, R__parent, "thetax", &thetax);
      R__insp.Inspect(R__cl, R__parent, "thetay", &thetay);
      R__insp.Inspect(R__cl, R__parent, "vertexx", (void*)&vertexx);
      ::ROOT::GenericShowMembers("vector<int>", (void*)&vertexx, R__insp, strcat(R__parent,"vertexx."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "vertexy", (void*)&vertexy);
      ::ROOT::GenericShowMembers("vector<int>", (void*)&vertexy, R__insp, strcat(R__parent,"vertexy."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "horn250", &horn250);
      R__insp.Inspect(R__cl, R__parent, "vpe", &vpe);
      R__insp.Inspect(R__cl, R__parent, "startxpln", &startxpln);
      R__insp.Inspect(R__cl, R__parent, "startypln", &startypln);
      R__insp.Inspect(R__cl, R__parent, "startxch", &startxch);
      R__insp.Inspect(R__cl, R__parent, "startych", &startych);
      R__insp.Inspect(R__cl, R__parent, "endxpln", &endxpln);
      R__insp.Inspect(R__cl, R__parent, "endypln", &endypln);
      R__insp.Inspect(R__cl, R__parent, "endxch", &endxch);
      R__insp.Inspect(R__cl, R__parent, "endych", &endych);
      R__insp.Inspect(R__cl, R__parent, "vertexx_true", &vertexx_true);
      R__insp.Inspect(R__cl, R__parent, "vertexy_true", &vertexy_true);
      R__insp.Inspect(R__cl, R__parent, "vertexz_true", &vertexz_true);
      R__insp.Inspect(R__cl, R__parent, "x", &x);
      R__insp.Inspect(R__cl, R__parent, "y", &y);
      R__insp.Inspect(R__cl, R__parent, "z", &z);
      R__insp.Inspect(R__cl, R__parent, "zx", &zx);
      R__insp.Inspect(R__cl, R__parent, "zy", &zy);
      R__insp.Inspect(R__cl, R__parent, "nhits", &nhits);
      R__insp.Inspect(R__cl, R__parent, "fIngridHit[1000]", fIngridHit);
      R__insp.Inspect(R__cl, R__parent, "fTrack[10]", fTrack);
      R__insp.Inspect(R__cl, R__parent, "ntracks", &ntracks);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_IngridBasicReconSummary(void *p) {
      return  p ? new(p) ::IngridBasicReconSummary : new ::IngridBasicReconSummary;
   }
   static void *newArray_IngridBasicReconSummary(Long_t nElements, void *p) {
      return p ? new(p) ::IngridBasicReconSummary[nElements] : new ::IngridBasicReconSummary[nElements];
   }
   // Wrapper around operator delete
   static void delete_IngridBasicReconSummary(void *p) {
      delete ((::IngridBasicReconSummary*)p);
   }
   static void deleteArray_IngridBasicReconSummary(void *p) {
      delete [] ((::IngridBasicReconSummary*)p);
   }
   static void destruct_IngridBasicReconSummary(void *p) {
      typedef ::IngridBasicReconSummary current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::IngridBasicReconSummary

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* IngridBasicReconSummaryDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableIngridBasicReconSummaryDict();

extern "C" void G__set_cpp_environmentIngridBasicReconSummaryDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("IngridBasicReconSummary.h");
  G__cpp_reset_tagtableIngridBasicReconSummaryDict();
}
#include <new>
extern "C" int G__cpp_dllrevIngridBasicReconSummaryDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* IngridBasicReconSummary */
static int G__IngridBasicReconSummaryDict_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   IngridBasicReconSummary* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IngridBasicReconSummary[n];
     } else {
       p = new((void*) gvp) IngridBasicReconSummary[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IngridBasicReconSummary;
     } else {
       p = new((void*) gvp) IngridBasicReconSummary;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   IngridBasicReconSummary* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new IngridBasicReconSummary(*(IngridBasicReconSummary*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) IngridBasicReconSummary(*(IngridBasicReconSummary*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IngridBasicReconSummary*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IngridBasicReconSummary*) G__getstructoffset())->AddIngridHit((IngridHitSummary*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const IngridBasicReconSummary*) G__getstructoffset())->GetIngridHit((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IngridBasicReconSummary*) G__getstructoffset())->AddTrack((IngridTrackSummary*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const IngridBasicReconSummary*) G__getstructoffset())->GetTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((IngridBasicReconSummary*) G__getstructoffset())->Nhits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((IngridBasicReconSummary*) G__getstructoffset())->Ntracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) IngridBasicReconSummary::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IngridBasicReconSummary::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) IngridBasicReconSummary::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      IngridBasicReconSummary::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IngridBasicReconSummary*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IngridBasicReconSummary::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IngridBasicReconSummary::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IngridBasicReconSummary::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridBasicReconSummaryDict_178_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IngridBasicReconSummary::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef IngridBasicReconSummary G__TIngridBasicReconSummary;
static int G__IngridBasicReconSummaryDict_178_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (IngridBasicReconSummary*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((IngridBasicReconSummary*) (soff+(sizeof(IngridBasicReconSummary)*i)))->~G__TIngridBasicReconSummary();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (IngridBasicReconSummary*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((IngridBasicReconSummary*) (soff))->~G__TIngridBasicReconSummary();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__IngridBasicReconSummaryDict_178_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   IngridBasicReconSummary* dest = (IngridBasicReconSummary*) G__getstructoffset();
   *dest = *(IngridBasicReconSummary*) libp->para[0].ref;
   const IngridBasicReconSummary& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* IngridBasicReconSummary */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncIngridBasicReconSummaryDict {
 public:
  G__Sizep2memfuncIngridBasicReconSummaryDict(): p(&G__Sizep2memfuncIngridBasicReconSummaryDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncIngridBasicReconSummaryDict::*p)();
};

size_t G__get_sizep2memfuncIngridBasicReconSummaryDict()
{
  G__Sizep2memfuncIngridBasicReconSummaryDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceIngridBasicReconSummaryDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary))) {
     IngridBasicReconSummary *G__Lderived;
     G__Lderived=(IngridBasicReconSummary*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary),G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableIngridBasicReconSummaryDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* IngridBasicReconSummary */
static void G__setup_memvarIngridBasicReconSummary(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary));
   { IngridBasicReconSummary *p; p=(IngridBasicReconSummary*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Ntrack)-(long)(p)),105,0,0,-1,-1,-1,1,"Ntrack=",0,"number of tracks from vertex");
   G__memvar_setup((void*)((long)(&p->clstime)-(long)(p)),102,0,0,-1,-1,-1,1,"clstime=",0,"time of cluster defined by most high p.e. channel's time");
   G__memvar_setup((void*)((long)(&p->CTtimecorr)-(long)(p)),102,0,0,-1,-1,-1,1,"CTtimecorr=",0,"i'th beam bunch timing at CT - 581*i ");
   G__memvar_setup((void*)((long)(&p->clstimecorr)-(long)(p)),102,0,0,-1,-1,-1,1,"clstimecorr=",0,"time after correction by measurement time of CT");
   G__memvar_setup((void*)((long)(&p->exptime)-(long)(p)),102,0,0,-1,-1,-1,1,"exptime=",0,"difference from expected beam time");
   G__memvar_setup((void*)((long)(&p->nhitclster)-(long)(p)),105,0,0,-1,-1,-1,1,"nhitclster=",0,"# of hits in clster");
   G__memvar_setup((void*)((long)(&p->nactpln)-(long)(p)),105,0,0,-1,-1,-1,1,"nactpln=",0,"number of active planes");
   G__memvar_setup((void*)((long)(&p->actinarow)-(long)(p)),105,0,0,-1,-1,-1,1,"actinarow=",0,"active plane's bit");
   G__memvar_setup((void*)((long)(&p->layerpe)-(long)(p)),102,0,0,-1,-1,-1,1,"layerpe=",0,"number of p.e. / active layer");
   G__memvar_setup((void*)((long)(&p->upstreamVETO)-(long)(p)),103,0,0,-1,-1,-1,1,"upstreamVETO=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->upstreamedge)-(long)(p)),103,0,0,-1,-1,-1,1,"upstreamedge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->newfid)-(long)(p)),103,0,0,-1,-1,-1,1,"newfid=",0,"2010/5/12 new fiducial volume");
   G__memvar_setup((void*)((long)(&p->newfidcosmic)-(long)(p)),103,0,0,-1,-1,-1,1,"newfidcosmic=",0,"x, x, (4 ~ 19), (2 ~ 21), (1 ~ 22)...(1 ~ 22), (2 ~ 21), (4 ~ 19), x, x");
   G__memvar_setup((void*)((long)(&p->vinternal)-(long)(p)),103,0,0,-1,-1,-1,1,"vinternal=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hitmod)-(long)(p)),105,0,0,-1,-1,-1,1,"hitmod=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hitcyc)-(long)(p)),105,0,0,-1,-1,-1,1,"hitcyc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->spill_flag)-(long)(p)),103,0,0,-1,-1,-1,1,"spill_flag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bunch_flag)-(long)(p)),103,0,0,-1,-1,-1,1,"bunch_flag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ontime)-(long)(p)),103,0,0,-1,-1,-1,1,"ontime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trgbit)-(long)(p)),105,0,0,-1,-1,-1,1,"trgbit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inarowbit)-(long)(p)),105,0,0,-1,-1,-1,1,"inarowbit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vetodist)-(long)(p)),102,0,0,-1,-1,-1,1,"vetodist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vetowtracking)-(long)(p)),103,0,0,-1,-1,-1,1,"vetowtracking=",0,"Upstream VETO");
   G__memvar_setup((void*)((long)(&p->edgewtracking)-(long)(p)),103,0,0,-1,-1,-1,1,"edgewtracking=",0,"Fiducial CUT");
   G__memvar_setup((void*)((long)(&p->hastrk)-(long)(p)),103,0,0,-1,-1,-1,1,"hastrk=",0,"Tracking succsess");
   G__memvar_setup((void*)((long)(&p->matchtrk)-(long)(p)),103,0,0,-1,-1,-1,1,"matchtrk=",0,"Track matching selection");
   G__memvar_setup((void*)((long)(&p->modfc)-(long)(p)),103,0,0,-1,-1,-1,1,"modfc=",0,"module FC(Fully Contained) event");
   G__memvar_setup((void*)((long)(&p->penIron)-(long)(p)),105,0,0,-1,-1,-1,1,"penIron=",0,"# of penetrated iron");
   G__memvar_setup((void*)((long)(&p->muE)-(long)(p)),102,0,0,-1,-1,-1,1,"muE=",0,"energy of muon");
   G__memvar_setup((void*)((long)(&p->nuErec)-(long)(p)),102,0,0,-1,-1,-1,1,"nuErec=",0,"reconstructed energy of neutrino");
   G__memvar_setup((void*)((long)(&p->nhitx)-(long)(p)),105,0,0,-1,-1,-1,1,"nhitx=",0,"Number of Hit at X view (view == FromY)");
   G__memvar_setup((void*)((long)(&p->nhity)-(long)(p)),105,0,0,-1,-1,-1,1,"nhity=",0,"Number of Hit at Y view (view == FromX)");
   G__memvar_setup((void*)((long)(&p->ntrackhitx)-(long)(p)),105,0,0,-1,-1,-1,1,"ntrackhitx=",0,"Number of Hit at X view which are associated with reconstrack track");
   G__memvar_setup((void*)((long)(&p->ntrackhity)-(long)(p)),105,0,0,-1,-1,-1,1,"ntrackhity=",0,"Number of Hit at Y view which are associated with reconstrack track");
   G__memvar_setup((void*)((long)(&p->retracktest)-(long)(p)),105,0,0,-1,-1,-1,1,"retracktest=",0,"Bit for re-tracking test");
   G__memvar_setup((void*)((long)(&p->trg_sec)-(long)(p)),105,0,0,-1,-1,-1,1,"trg_sec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->upstreamtpl)-(long)(p)),105,0,0,-1,-1,-1,1,"upstreamtpl=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertexz)-(long)(p)),105,0,0,-1,-1,-1,1,"vertexz=",0,"most upstream TPL #");
   G__memvar_setup((void*)((long)(&p->vertexxz)-(long)(p)),105,0,0,-1,-1,-1,1,"vertexxz=",0,"most upstream TPL #(from X view)");
   G__memvar_setup((void*)((long)(&p->vertexyz)-(long)(p)),105,0,0,-1,-1,-1,1,"vertexyz=",0,"most upstream TPL #(from Y view)");
   G__memvar_setup((void*)((long)(&p->angle)-(long)(p)),102,0,0,-1,-1,-1,1,"angle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thetax)-(long)(p)),102,0,0,-1,-1,-1,1,"thetax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->thetay)-(long)(p)),102,0,0,-1,-1,-1,1,"thetay=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertexx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"vertexx=",0,"X Ch# at upstream TPL");
   G__memvar_setup((void*)((long)(&p->vertexy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"vertexy=",0,"Y Ch# at upstream TPL");
   G__memvar_setup((void*)((long)(&p->horn250)-(long)(p)),103,0,0,-1,-1,-1,1,"horn250=",0,"all horns 250kA");
   G__memvar_setup((void*)((long)(&p->vpe)-(long)(p)),102,0,0,-1,-1,-1,1,"vpe=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startxpln)-(long)(p)),105,0,0,-1,-1,-1,1,"startxpln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startypln)-(long)(p)),105,0,0,-1,-1,-1,1,"startypln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startxch)-(long)(p)),105,0,0,-1,-1,-1,1,"startxch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startych)-(long)(p)),105,0,0,-1,-1,-1,1,"startych=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->endxpln)-(long)(p)),105,0,0,-1,-1,-1,1,"endxpln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->endypln)-(long)(p)),105,0,0,-1,-1,-1,1,"endypln=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->endxch)-(long)(p)),105,0,0,-1,-1,-1,1,"endxch=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->endych)-(long)(p)),105,0,0,-1,-1,-1,1,"endych=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vertexx_true)-(long)(p)),102,0,0,-1,-1,-1,1,"vertexx_true=",0,"true local x-position[cm] within module");
   G__memvar_setup((void*)((long)(&p->vertexy_true)-(long)(p)),102,0,0,-1,-1,-1,1,"vertexy_true=",0,"true local y-position[cm] within module");
   G__memvar_setup((void*)((long)(&p->vertexz_true)-(long)(p)),102,0,0,-1,-1,-1,1,"vertexz_true=",0,"true local z-position[cm] within module");
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,-1,-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,-1,-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,-1,-1,1,"z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zx)-(long)(p)),102,0,0,-1,-1,-1,1,"zx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zy)-(long)(p)),102,0,0,-1,-1,-1,1,"zy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nhits)-(long)(p)),105,0,0,-1,-1,-1,1,"nhits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_TRef),-1,-1,4,"fIngridHit[1000]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_TRef),-1,-1,4,"fTrack[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntracks)-(long)(p)),105,0,0,-1,-1,-1,1,"ntracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarIngridBasicReconSummaryDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncIngridBasicReconSummary(void) {
   /* IngridBasicReconSummary */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary));
   G__memfunc_setup("IngridBasicReconSummary",2340,G__IngridBasicReconSummaryDict_178_0_1, 105, G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IngridBasicReconSummary",2340,G__IngridBasicReconSummaryDict_178_0_2, 105, G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary), -1, 0, 1, 1, 1, 0, "u 'IngridBasicReconSummary' - 11 - basicsum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__IngridBasicReconSummaryDict_178_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIngridHit",1163,G__IngridBasicReconSummaryDict_178_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'IngridHitSummary' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIngridHit",1186,G__IngridBasicReconSummaryDict_178_0_6, 85, G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridHitSummary), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__IngridBasicReconSummaryDict_178_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'IngridTrackSummary' - 0 - trk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__IngridBasicReconSummaryDict_178_0_8, 85, G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridTrackSummary), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nhits",518,G__IngridBasicReconSummaryDict_178_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ntracks",726,G__IngridBasicReconSummaryDict_178_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__IngridBasicReconSummaryDict_178_0_11, 85, G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&IngridBasicReconSummary::Class), 0);
   G__memfunc_setup("Class_Name",982,G__IngridBasicReconSummaryDict_178_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&IngridBasicReconSummary::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__IngridBasicReconSummaryDict_178_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&IngridBasicReconSummary::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__IngridBasicReconSummaryDict_178_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&IngridBasicReconSummary::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__IngridBasicReconSummaryDict_178_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__IngridBasicReconSummaryDict_178_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&IngridBasicReconSummary::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__IngridBasicReconSummaryDict_178_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&IngridBasicReconSummary::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__IngridBasicReconSummaryDict_178_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&IngridBasicReconSummary::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__IngridBasicReconSummaryDict_178_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&IngridBasicReconSummary::DeclFileLine), 0);
   // automatic destructor
   G__memfunc_setup("~IngridBasicReconSummary", 2466, G__IngridBasicReconSummaryDict_178_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__IngridBasicReconSummaryDict_178_0_24, (int) ('u'), G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary), -1, 1, 1, 1, 1, 0, "u 'IngridBasicReconSummary' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncIngridBasicReconSummaryDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalIngridBasicReconSummaryDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcIngridBasicReconSummaryDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__IngridBasicReconSummaryDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_IngridHitSummary = { "IngridHitSummary" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_IngridTrackSummary = { "IngridTrackSummary" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary = { "IngridBasicReconSummary" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableIngridBasicReconSummaryDict() {
  G__IngridBasicReconSummaryDictLN_TClass.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_TBuffer.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_TMemberInspector.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_TObject.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_TRef.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_IngridHitSummary.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_IngridTrackSummary.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableIngridBasicReconSummaryDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_TRef);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_IngridHitSummary);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_IngridTrackSummary);
   G__tagtable_setup(G__get_linked_tagnum(&G__IngridBasicReconSummaryDictLN_IngridBasicReconSummary),sizeof(IngridBasicReconSummary),-1,30464,"Ingrid Hit Summary",G__setup_memvarIngridBasicReconSummary,G__setup_memfuncIngridBasicReconSummary);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__IngridBasicReconSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupIngridBasicReconSummaryDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupIngridBasicReconSummaryDict()");
  G__set_cpp_environmentIngridBasicReconSummaryDict();
  G__cpp_setup_tagtableIngridBasicReconSummaryDict();

  G__cpp_setup_inheritanceIngridBasicReconSummaryDict();

  G__cpp_setup_typetableIngridBasicReconSummaryDict();

  G__cpp_setup_memvarIngridBasicReconSummaryDict();

  G__cpp_setup_memfuncIngridBasicReconSummaryDict();
  G__cpp_setup_globalIngridBasicReconSummaryDict();
  G__cpp_setup_funcIngridBasicReconSummaryDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncIngridBasicReconSummaryDict();
  return;
}
class G__cpp_setup_initIngridBasicReconSummaryDict {
  public:
    G__cpp_setup_initIngridBasicReconSummaryDict() { G__add_setup_func("IngridBasicReconSummaryDict",(G__incsetup)(&G__cpp_setupIngridBasicReconSummaryDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initIngridBasicReconSummaryDict() { G__remove_setup_func("IngridBasicReconSummaryDict"); }
};
G__cpp_setup_initIngridBasicReconSummaryDict G__cpp_setup_initializerIngridBasicReconSummaryDict;

