//
// File generated by rootcint at Sat Jan 24 00:47:50 2015

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "IngridSimVertexSummaryDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void IngridSimVertexSummary_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_IngridSimVertexSummary(void *p = 0);
   static void *newArray_IngridSimVertexSummary(Long_t size, void *p);
   static void delete_IngridSimVertexSummary(void *p);
   static void deleteArray_IngridSimVertexSummary(void *p);
   static void destruct_IngridSimVertexSummary(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::IngridSimVertexSummary*)
   {
      ::IngridSimVertexSummary *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::IngridSimVertexSummary >(0);
      static ::ROOT::TGenericClassInfo 
         instance("IngridSimVertexSummary", ::IngridSimVertexSummary::Class_Version(), "IngridSimVertexSummary.h", 12,
                  typeid(::IngridSimVertexSummary), DefineBehavior(ptr, ptr),
                  &::IngridSimVertexSummary::Dictionary, isa_proxy, 0,
                  sizeof(::IngridSimVertexSummary) );
      instance.SetNew(&new_IngridSimVertexSummary);
      instance.SetNewArray(&newArray_IngridSimVertexSummary);
      instance.SetDelete(&delete_IngridSimVertexSummary);
      instance.SetDeleteArray(&deleteArray_IngridSimVertexSummary);
      instance.SetDestructor(&destruct_IngridSimVertexSummary);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::IngridSimVertexSummary*)
   {
      return GenerateInitInstanceLocal((::IngridSimVertexSummary*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::IngridSimVertexSummary*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *IngridSimVertexSummary::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *IngridSimVertexSummary::Class_Name()
{
   return "IngridSimVertexSummary";
}

//______________________________________________________________________________
const char *IngridSimVertexSummary::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::IngridSimVertexSummary*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int IngridSimVertexSummary::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::IngridSimVertexSummary*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void IngridSimVertexSummary::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::IngridSimVertexSummary*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *IngridSimVertexSummary::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::IngridSimVertexSummary*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void IngridSimVertexSummary::Streamer(TBuffer &R__b)
{
   // Stream an object of class IngridSimVertexSummary.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> nutype;
      R__b.ReadStaticArray((float*)numomentum);
      R__b >> nuE;
      R__b >> norm;
      R__b >> ng;
      {
         vector<int> &R__stl =  gpid;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  gmec;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  gposx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  gposy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  gposz;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  gmomx;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  gmomy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  gmomz;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<float> &R__stl =  gcosbm;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> targeta;
      R__b >> targetz;
      R__b >> targettype;
      R__b >> pfsurf;
      R__b >> vnuclini;
      R__b >> inttype;
      R__b >> mod;
      R__b >> xnu;
      R__b >> ynu;
      R__b >> znu;
      R__b >> totcrsne;
      R__b.CheckByteCount(R__s, R__c, IngridSimVertexSummary::IsA());
   } else {
      R__c = R__b.WriteVersion(IngridSimVertexSummary::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << nutype;
      R__b.WriteArray(numomentum, 3);
      R__b << nuE;
      R__b << norm;
      R__b << ng;
      {
         vector<int> &R__stl =  gpid;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  gmec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  gposx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  gposy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  gposz;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  gmomx;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  gmomy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  gmomz;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<float> &R__stl =  gcosbm;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << targeta;
      R__b << targetz;
      R__b << targettype;
      R__b << pfsurf;
      R__b << vnuclini;
      R__b << inttype;
      R__b << mod;
      R__b << xnu;
      R__b << ynu;
      R__b << znu;
      R__b << totcrsne;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void IngridSimVertexSummary::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class IngridSimVertexSummary.
      TClass *R__cl = ::IngridSimVertexSummary::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "nutype", &nutype);
      R__insp.Inspect(R__cl, R__parent, "numomentum[3]", numomentum);
      R__insp.Inspect(R__cl, R__parent, "nuE", &nuE);
      R__insp.Inspect(R__cl, R__parent, "norm", &norm);
      R__insp.Inspect(R__cl, R__parent, "ng", &ng);
      R__insp.Inspect(R__cl, R__parent, "gpid", (void*)&gpid);
      ::ROOT::GenericShowMembers("vector<int>", (void*)&gpid, R__insp, strcat(R__parent,"gpid."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "gmec", (void*)&gmec);
      ::ROOT::GenericShowMembers("vector<int>", (void*)&gmec, R__insp, strcat(R__parent,"gmec."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "gposx", (void*)&gposx);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&gposx, R__insp, strcat(R__parent,"gposx."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "gposy", (void*)&gposy);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&gposy, R__insp, strcat(R__parent,"gposy."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "gposz", (void*)&gposz);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&gposz, R__insp, strcat(R__parent,"gposz."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "gmomx", (void*)&gmomx);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&gmomx, R__insp, strcat(R__parent,"gmomx."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "gmomy", (void*)&gmomy);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&gmomy, R__insp, strcat(R__parent,"gmomy."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "gmomz", (void*)&gmomz);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&gmomz, R__insp, strcat(R__parent,"gmomz."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "gcosbm", (void*)&gcosbm);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&gcosbm, R__insp, strcat(R__parent,"gcosbm."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "targeta", &targeta);
      R__insp.Inspect(R__cl, R__parent, "targetz", &targetz);
      R__insp.Inspect(R__cl, R__parent, "targettype", &targettype);
      R__insp.Inspect(R__cl, R__parent, "pfsurf", &pfsurf);
      R__insp.Inspect(R__cl, R__parent, "vnuclini", &vnuclini);
      R__insp.Inspect(R__cl, R__parent, "inttype", &inttype);
      R__insp.Inspect(R__cl, R__parent, "mod", &mod);
      R__insp.Inspect(R__cl, R__parent, "xnu", &xnu);
      R__insp.Inspect(R__cl, R__parent, "ynu", &ynu);
      R__insp.Inspect(R__cl, R__parent, "znu", &znu);
      R__insp.Inspect(R__cl, R__parent, "totcrsne", &totcrsne);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_IngridSimVertexSummary(void *p) {
      return  p ? new(p) ::IngridSimVertexSummary : new ::IngridSimVertexSummary;
   }
   static void *newArray_IngridSimVertexSummary(Long_t nElements, void *p) {
      return p ? new(p) ::IngridSimVertexSummary[nElements] : new ::IngridSimVertexSummary[nElements];
   }
   // Wrapper around operator delete
   static void delete_IngridSimVertexSummary(void *p) {
      delete ((::IngridSimVertexSummary*)p);
   }
   static void deleteArray_IngridSimVertexSummary(void *p) {
      delete [] ((::IngridSimVertexSummary*)p);
   }
   static void destruct_IngridSimVertexSummary(void *p) {
      typedef ::IngridSimVertexSummary current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::IngridSimVertexSummary

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* IngridSimVertexSummaryDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableIngridSimVertexSummaryDict();

extern "C" void G__set_cpp_environmentIngridSimVertexSummaryDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("IngridSimVertexSummary.h");
  G__cpp_reset_tagtableIngridSimVertexSummaryDict();
}
#include <new>
extern "C" int G__cpp_dllrevIngridSimVertexSummaryDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* IngridSimVertexSummary */
static int G__IngridSimVertexSummaryDict_139_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   IngridSimVertexSummary* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IngridSimVertexSummary[n];
     } else {
       p = new((void*) gvp) IngridSimVertexSummary[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IngridSimVertexSummary;
     } else {
       p = new((void*) gvp) IngridSimVertexSummary;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridSimVertexSummaryDict_139_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) IngridSimVertexSummary::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridSimVertexSummaryDict_139_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IngridSimVertexSummary::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridSimVertexSummaryDict_139_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) IngridSimVertexSummary::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridSimVertexSummaryDict_139_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      IngridSimVertexSummary::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridSimVertexSummaryDict_139_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IngridSimVertexSummary*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridSimVertexSummaryDict_139_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IngridSimVertexSummary::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridSimVertexSummaryDict_139_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IngridSimVertexSummary::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridSimVertexSummaryDict_139_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IngridSimVertexSummary::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__IngridSimVertexSummaryDict_139_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IngridSimVertexSummary::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__IngridSimVertexSummaryDict_139_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   IngridSimVertexSummary* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new IngridSimVertexSummary(*(IngridSimVertexSummary*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef IngridSimVertexSummary G__TIngridSimVertexSummary;
static int G__IngridSimVertexSummaryDict_139_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (IngridSimVertexSummary*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((IngridSimVertexSummary*) (soff+(sizeof(IngridSimVertexSummary)*i)))->~G__TIngridSimVertexSummary();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (IngridSimVertexSummary*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((IngridSimVertexSummary*) (soff))->~G__TIngridSimVertexSummary();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__IngridSimVertexSummaryDict_139_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   IngridSimVertexSummary* dest = (IngridSimVertexSummary*) G__getstructoffset();
   *dest = *(IngridSimVertexSummary*) libp->para[0].ref;
   const IngridSimVertexSummary& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* IngridSimVertexSummary */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncIngridSimVertexSummaryDict {
 public:
  G__Sizep2memfuncIngridSimVertexSummaryDict(): p(&G__Sizep2memfuncIngridSimVertexSummaryDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncIngridSimVertexSummaryDict::*p)();
};

size_t G__get_sizep2memfuncIngridSimVertexSummaryDict()
{
  G__Sizep2memfuncIngridSimVertexSummaryDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceIngridSimVertexSummaryDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary))) {
     IngridSimVertexSummary *G__Lderived;
     G__Lderived=(IngridSimVertexSummary*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary),G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableIngridSimVertexSummaryDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* IngridSimVertexSummary */
static void G__setup_memvarIngridSimVertexSummary(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary));
   { IngridSimVertexSummary *p; p=(IngridSimVertexSummary*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nutype)-(long)(p)),105,0,0,-1,-1,-1,1,"nutype=",0,"Neutrino type (generator-specific numbering");
   G__memvar_setup((void*)((long)(&p->numomentum)-(long)(p)),102,0,0,-1,-1,-1,1,"numomentum[3]=",0,"Neutrino 3-momentum (GeV/c)");
   G__memvar_setup((void*)((long)(&p->nuE)-(long)(p)),102,0,0,-1,-1,-1,1,"nuE=",0,"Neutrino Energy (GeV)");
   G__memvar_setup((void*)((long)(&p->norm)-(long)(p)),102,0,0,-1,-1,-1,1,"norm=",0,"Weighting factor of Jnubeam				");
   G__memvar_setup((void*)((long)(&p->ng)-(long)(p)),105,0,0,-1,-1,-1,1,"ng=",0,"# of parents (# of generations)");
   G__memvar_setup((void*)((long)(&p->gpid)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"gpid=",0,"particle ID of each ancestor particle, gpid[0]=primary proton");
   G__memvar_setup((void*)((long)(&p->gmec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"gmec=",0,"particle production mechanism");
   G__memvar_setup((void*)((long)(&p->gposx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"gposx=",0,"interaction vertex point of each ancestor");
   G__memvar_setup((void*)((long)(&p->gposy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"gposy=",0,"interaction vertex point of each ancestor");
   G__memvar_setup((void*)((long)(&p->gposz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"gposz=",0,"interaction vertex point of each ancestor");
   G__memvar_setup((void*)((long)(&p->gmomx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"gmomx=",0,"directional momentum");
   G__memvar_setup((void*)((long)(&p->gmomy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"gmomy=",0,"directional momentum");
   G__memvar_setup((void*)((long)(&p->gmomz)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"gmomz=",0,"directional momentum");
   G__memvar_setup((void*)((long)(&p->gcosbm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"gcosbm=",0,"cosine of angle between ancestor and beam");
   G__memvar_setup((void*)((long)(&p->targeta)-(long)(p)),105,0,0,-1,-1,-1,1,"targeta=",0,"Atomic weight of target nucleus (TO BE FIXED)");
   G__memvar_setup((void*)((long)(&p->targetz)-(long)(p)),105,0,0,-1,-1,-1,1,"targetz=",0,"Atomic number of target nucleus");
   G__memvar_setup((void*)((long)(&p->targettype)-(long)(p)),105,0,0,-1,-1,-1,1,"targettype=",0,"Neutrino target type (generator-specific)");
   G__memvar_setup((void*)((long)(&p->pfsurf)-(long)(p)),102,0,0,-1,-1,-1,1,"pfsurf=",0,"Fermi surface momentum (GeV/c)");
   G__memvar_setup((void*)((long)(&p->vnuclini)-(long)(p)),102,0,0,-1,-1,-1,1,"vnuclini=",0,"Nuclear potential for the target initial state (GeV)");
   G__memvar_setup((void*)((long)(&p->inttype)-(long)(p)),105,0,0,-1,-1,-1,1,"inttype=",0,"Neutrino interaction type (generator-specific");
   G__memvar_setup((void*)((long)(&p->mod)-(long)(p)),105,0,0,-1,-1,-1,1,"mod=",0,"Interaction vertex module");
   G__memvar_setup((void*)((long)(&p->xnu)-(long)(p)),102,0,0,-1,-1,-1,1,"xnu=",0,"interaction vertex x (from jnubeam)");
   G__memvar_setup((void*)((long)(&p->ynu)-(long)(p)),102,0,0,-1,-1,-1,1,"ynu=",0,"interaction vertex y (from jnubeam)");
   G__memvar_setup((void*)((long)(&p->znu)-(long)(p)),102,0,0,-1,-1,-1,1,"znu=",0,"interaction vertex z (from jnubeam)");
   G__memvar_setup((void*)((long)(&p->totcrsne)-(long)(p)),102,0,0,-1,-1,-1,1,"totcrsne=",0,"Total cross section [10^-38 cm^2]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarIngridSimVertexSummaryDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncIngridSimVertexSummary(void) {
   /* IngridSimVertexSummary */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary));
   G__memfunc_setup("IngridSimVertexSummary",2290,G__IngridSimVertexSummaryDict_139_0_1, 105, G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__IngridSimVertexSummaryDict_139_0_4, 85, G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&IngridSimVertexSummary::Class), 0);
   G__memfunc_setup("Class_Name",982,G__IngridSimVertexSummaryDict_139_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&IngridSimVertexSummary::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__IngridSimVertexSummaryDict_139_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&IngridSimVertexSummary::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__IngridSimVertexSummaryDict_139_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&IngridSimVertexSummary::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__IngridSimVertexSummaryDict_139_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__IngridSimVertexSummaryDict_139_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&IngridSimVertexSummary::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__IngridSimVertexSummaryDict_139_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&IngridSimVertexSummary::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__IngridSimVertexSummaryDict_139_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&IngridSimVertexSummary::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__IngridSimVertexSummaryDict_139_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&IngridSimVertexSummary::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("IngridSimVertexSummary", 2290, G__IngridSimVertexSummaryDict_139_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary), -1, 0, 1, 1, 1, 0, "u 'IngridSimVertexSummary' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~IngridSimVertexSummary", 2416, G__IngridSimVertexSummaryDict_139_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__IngridSimVertexSummaryDict_139_0_18, (int) ('u'), G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary), -1, 1, 1, 1, 1, 0, "u 'IngridSimVertexSummary' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncIngridSimVertexSummaryDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalIngridSimVertexSummaryDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcIngridSimVertexSummaryDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__IngridSimVertexSummaryDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__IngridSimVertexSummaryDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__IngridSimVertexSummaryDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__IngridSimVertexSummaryDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary = { "IngridSimVertexSummary" , 99 , -1 };
G__linked_taginfo G__IngridSimVertexSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__IngridSimVertexSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableIngridSimVertexSummaryDict() {
  G__IngridSimVertexSummaryDictLN_TClass.tagnum = -1 ;
  G__IngridSimVertexSummaryDictLN_TBuffer.tagnum = -1 ;
  G__IngridSimVertexSummaryDictLN_TMemberInspector.tagnum = -1 ;
  G__IngridSimVertexSummaryDictLN_TObject.tagnum = -1 ;
  G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary.tagnum = -1 ;
  G__IngridSimVertexSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__IngridSimVertexSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableIngridSimVertexSummaryDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__IngridSimVertexSummaryDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__IngridSimVertexSummaryDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__IngridSimVertexSummaryDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__IngridSimVertexSummaryDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__IngridSimVertexSummaryDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__IngridSimVertexSummaryDictLN_IngridSimVertexSummary),sizeof(IngridSimVertexSummary),-1,29952,"Simulation (generator + detector mc) ",G__setup_memvarIngridSimVertexSummary,G__setup_memfuncIngridSimVertexSummary);
   G__get_linked_tagnum_fwd(&G__IngridSimVertexSummaryDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__IngridSimVertexSummaryDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupIngridSimVertexSummaryDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupIngridSimVertexSummaryDict()");
  G__set_cpp_environmentIngridSimVertexSummaryDict();
  G__cpp_setup_tagtableIngridSimVertexSummaryDict();

  G__cpp_setup_inheritanceIngridSimVertexSummaryDict();

  G__cpp_setup_typetableIngridSimVertexSummaryDict();

  G__cpp_setup_memvarIngridSimVertexSummaryDict();

  G__cpp_setup_memfuncIngridSimVertexSummaryDict();
  G__cpp_setup_globalIngridSimVertexSummaryDict();
  G__cpp_setup_funcIngridSimVertexSummaryDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncIngridSimVertexSummaryDict();
  return;
}
class G__cpp_setup_initIngridSimVertexSummaryDict {
  public:
    G__cpp_setup_initIngridSimVertexSummaryDict() { G__add_setup_func("IngridSimVertexSummaryDict",(G__incsetup)(&G__cpp_setupIngridSimVertexSummaryDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initIngridSimVertexSummaryDict() { G__remove_setup_func("IngridSimVertexSummaryDict"); }
};
G__cpp_setup_initIngridSimVertexSummaryDict G__cpp_setup_initializerIngridSimVertexSummaryDict;

